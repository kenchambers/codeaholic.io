<head>
  <title>Codeaholic freelance web developer - software engineer - hacker - hired gun</title>
  <link rel="shortcut icon" href="/img/mirumaps.ico" type="image/x-icon">

  <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">


</head>

<link rel='stylesheet' type='text/css' href="./index.css">


<!-- <script src="../node_modules/whs/build/whitestorm.js"></script> -->

<!-- <script type="text/javascript" src="js/Detector.js"></script> -->
<!-- <script type="text/javascript" src="js/stats.min.js"></script> -->

<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/85/three.min.js" type="text/javascript"></script>
<script
  src="https://code.jquery.com/jquery-3.2.1.min.js"
  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
  crossorigin="anonymous"></script>

<script src="/dist/src/build.js" type="text/Javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tween.js/16.3.5/Tween.min.js"></script>

<style>

      #three_js_effect {
        opacity: 0;
      }

			body {
				background-color: #fffffff;
				margin: 0px;
				overflow: hidden;
				font-family:Monospace;
				font-size:13px;
				text-align:center;
				font-weight: bold;
				text-align:center;
			}
			a {
				color:#0078ff;
			}
			#info {
				color: #fff;
				position: absolute;
				top: 0px; width: 100%;
				padding: 5px;
				z-index: 100;
			}

      .fade_effect {
        -webkit-animation: fadeinout 2s linear forwards;
        animation: fadeinout 2s linear forwards;

      }

            @-webkit-keyframes fadeinout {
        0%,100% { opacity: 0; }
        50% { opacity: 1; }
      }

      @keyframes fadeinout {
        0%,100% { opacity: 0; }
        50% { opacity: 1; }
      }


		</style>
	</head>
	<body>

    <script>

    </script>


		<script>

    var Detector = {

    	canvas: !! window.CanvasRenderingContext2D,
    	webgl: ( function () {

    		try {

    			var canvas = document.createElement( 'canvas' ); return !! ( window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) ) );

    		} catch ( e ) {

    			return false;

    		}

    	} )(),
    	workers: !! window.Worker,
    	fileapi: window.File && window.FileReader && window.FileList && window.Blob,

    	getWebGLErrorMessage: function () {

    		var element = document.createElement( 'div' );
    		element.id = 'webgl-error-message';
    		element.style.fontFamily = 'monospace';
    		element.style.fontSize = '13px';
    		element.style.fontWeight = 'normal';
    		element.style.textAlign = 'center';
    		element.style.background = '#fff';
    		element.style.color = '#000';
    		element.style.padding = '1.5em';
    		element.style.width = '400px';
    		element.style.margin = '5em auto 0';

    		if ( ! this.webgl ) {

    			element.innerHTML = window.WebGLRenderingContext ? [
    				'Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />',
    				'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'
    			].join( '\n' ) : [
    				'Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>',
    				'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'
    			].join( '\n' );

    		}

    		return element;

    	},

    	addGetWebGLMessage: function ( parameters ) {

    		var parent, id, element;

    		parameters = parameters || {};

    		parent = parameters.parent !== undefined ? parameters.parent : document.body;
    		id = parameters.id !== undefined ? parameters.id : 'oldie';

    		element = Detector.getWebGLErrorMessage();
    		element.id = id;

    		parent.appendChild( element );

    	}

    };

    // browserify support
    if ( typeof module === 'object' ) {

    	module.exports = Detector;

    }

    var Stats = function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";c.addEventListener("click",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel("FPS","#0ff","#002")),f=h(new Stats.Panel("MS","#0f0","#020"));
    if(self.performance&&self.performance.memory)var t=h(new Stats.Panel("MB","#f08","#201"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}}


    Stats.Panel = function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r;q.height=f;q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");b.font="bold "+9*a+"px Helvetica,Arial,sans-serif";b.textBaseline="top";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,
    v){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+" "+h+" ("+e(c)+"-"+e(g)+")",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};











			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container, stats;
			var camera, scene, renderer, particles, geometry, materials = [], parameters, i, h, color, size;
			var mouseX = 0, mouseY = 0;
			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;
			init();
			animate();
			function init() {


				container = document.createElement( 'div' );
        container.id = "three_js_effect"
				document.body.appendChild( container );
				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 3000 );
				camera.position.z = 1000;
				scene = new THREE.Scene();
				scene.fog = new THREE.FogExp2( 0x000000, 0.0007 );
				geometry = new THREE.Geometry();
				for ( i = 0; i < 20000; i ++ ) {
					var vertex = new THREE.Vector3();
					vertex.x = Math.random() * 2000 - 1000;
					vertex.y = Math.random() * 2000 - 1000;
					vertex.z = Math.random() * 2000 - 1000;
					geometry.vertices.push( vertex );
				}
				parameters = [
					[ [1, 1, 0.5], 5 ],
					[ [0.95, 1, 0.5], 4 ],
					[ [0.90, 1, 0.5], 3 ],
					[ [0.85, 1, 0.5], 2 ],
					[ [0.80, 1, 0.5], 1 ]
				];
				for ( i = 0; i < parameters.length; i ++ ) {
					color = parameters[i][0];
					size  = parameters[i][1];
					materials[i] = new THREE.PointsMaterial( { size: size } );
					particles = new THREE.Points( geometry, materials[i] );
					particles.rotation.x = Math.random() * 6;
					particles.rotation.y = Math.random() * 6;
					particles.rotation.z = Math.random() * 6;
					scene.add( particles );
				}
				renderer = new THREE.WebGLRenderer();

				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
        renderer.setClearColor( 0xffffff, 1 );
				container.appendChild( renderer.domElement );
				stats = new Stats();
				container.appendChild( stats.dom );
				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );
				document.addEventListener( 'touchmove', onDocumentTouchMove, false );
        document.addEventListener( 'click', onDocumentClick, false );
				//
				window.addEventListener( 'resize', onWindowResize, false );
			}



			function onDocumentClick() {

        el = $('#three_js_effect');
       el.addClass('fade_effect');
       el.one('webkitAnimationEnd oanimationend msAnimationEnd animationend',
       function (e) {
         console.log("fade event over")
           el.removeClass('fade_effect');
       });

      //  $('#three_js_effect').addClass('shake').delay(1000).fadeIn(0, function() { $(this).removeClass('shake'); });


        var coords = {z:0 };
        var tween = new TWEEN.Tween(coords)
        	.to({z:1000}, 2000)
        	.onUpdate(function() {
        		// console.log(this.x, this.y);
            camera.position.z = this.z
        	})
        	.start();

        requestAnimationFrame(animate);

        function animate(time) {
        	requestAnimationFrame(animate);
        	TWEEN.update(time);
        }

			}


			function onWindowResize() {
				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			}
			function onDocumentMouseMove( event ) {
				mouseX = event.clientX - windowHalfX;
				mouseY = event.clientY - windowHalfY;
			}
			function onDocumentTouchStart( event ) {
				if ( event.touches.length === 1 ) {
					event.preventDefault();
					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;
				}
			}
			function onDocumentTouchMove( event ) {
				if ( event.touches.length === 1 ) {
					event.preventDefault();
					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;
				}
			}
			//
			function animate() {
				requestAnimationFrame( animate );
				render();
				stats.update();
			}
			function render() {
				var time = Date.now() * 0.00005;
				camera.position.x += ( mouseX - camera.position.x ) * 0.05;
				camera.position.y += ( - mouseY - camera.position.y ) * 0.05;
				camera.lookAt( scene.position );
				for ( i = 0; i < scene.children.length; i ++ ) {
					var object = scene.children[ i ];
					if ( object instanceof THREE.Points ) {
						object.rotation.y = time * ( i < 4 ? i + 1 : - ( i + 1 ) );
					}
				}
				for ( i = 0; i < materials.length; i ++ ) {
					color = parameters[i][0];
					h = ( 360 * ( color[0] + time ) % 360 ) / 360;
					materials[i].color.setHSL( h, color[1], color[2] );
				}
				renderer.render( scene, camera );
			}
		</script>



<div id="app-target"></div>
